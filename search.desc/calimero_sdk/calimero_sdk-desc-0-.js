searchState.loadedDescShard("calimero_sdk", 0, "Unique identifier for an account.\nDelete a proposal.\nA draft proposal.\nInterface for interacting with external proposals for …\nCall a method on a contract.\nA blockchain proposal action.\nUnique identifier for a proposal.\nSet the number of active proposals allowed at once.\nSet a value in the contract’s context.\nSet the number of approvals required for a proposal to be …\nTransfer tokens to an account.\nApprove an existing proposal by its ID.\nAdd an action to delete a proposal.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new draft proposal.\nCreate a new proposal. This will initially be a draft, …\nFinalise the proposal and send it to the blockchain.\nAdd an action to set active proposals limit\nAdd an action to set a context value\nAdd an action to set number of approvals\nAdd an action to transfer tokens to an account.\nThe number of active proposals allowed.\nThe amount of tokens to transfer.\nThe arguments to pass to the method.\nThe amount of tokens to attach to the call.\nThe key to set.\nThe method name to call.\nThe number of approvals required.\nThe ID of the proposal to delete.\nThe account ID of the contract to call.\nThe account ID of the receiver.\nThe value to set.\nContains the error value\nContains the success value\nFill the buffer with random bytes.\nGets the current time.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")