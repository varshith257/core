searchState.loadedDescShard("calimero_storage", 0, "Storage interface providing functionality for interacting …\nDerives the <code>AtomicUnit</code> trait for a struct.\nDerives the <code>Collection</code> trait for a struct.\nAddressing of elements in the storage system.\nHigh-level data structures for storage.\nEntities for the storage system.\nEnvironment bindings for the storage crate.\nRe-exported types, mostly for use in macros (for …\nIndexing system for efficient tree navigation.\nTypes used for integration with the runtime.\nInterface for the storage system.\nStorage operations.\nSynchronisation utilities for external runtimes.\nThe path is empty.\nA path segment is empty.\nGlobally-unique identifier for an <code>Element</code>.\nThe path is not absolute. All paths must start with a …\nThe path is too long. The maximum length allowed is 255 …\nPath to an <code>Element</code>.\nErrors that can occur when working with <code>Path</code>s.\nReturns the byte array representation of the ID.\nThe number of segments in the <code>Path</code>.\nThe first segment of the <code>Path</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the <code>Path</code> is an ancestor of another <code>Path</code>.\nChecks if the <code>Path</code> is a descendant of another <code>Path</code>.\nChecks if the ID is the root.\nChecks if the <code>Path</code> is the root.\nJoins two <code>Path</code>s.\nThe last segment of the <code>Path</code>.\nCreates a new globally-unique identifier.\nCreates a new <code>Path</code> from a string.\nThe parent of the <code>Path</code>.\nCreates a new random globally-unique identifier.\nRoot ID which is set to the context ID.\nThe segment at a given index.\nThe segments of the <code>Path</code>.\nError types for storage operations.\nThis module provides functionality for the unordered map …\nThis module provides functionality for the unordered set …\nThis module provides functionality for the vector data …\nError while interacting with a path.\nError while interacting with storage.\nGeneral error type for storage operations while …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA map collection that stores key-value pairs.\nClear the map, removing all entries.\nCheck if the map contains a key.\nGet an iterator over the entries in the map.\nReturns the argument unchanged.\nGet the value for a key in the map.\nInsert a key-value pair into the map.\nCalls <code>U::from(self)</code>.\nGet the number of entries in the map.\nCreate a new map collection.\nRemove a key from the map, returning the value at the key …\nA set collection that stores unqiue values once.\nClear the set, removing all items.\nGet the value for a key in the set.\nReturns the argument unchanged.\nInsert a value pair into the set collection if the element …\nCalls <code>U::from(self)</code>.\nGet an iterator over the items in the set.\nGet the number of items in the set.\nCreate a new set collection.\nRemove a key from the set, returning the value at the key …\nA vector collection that stores key-value pairs.\nClear the vector, removing all items.\nGet the value for a key in the vector.\nReturns the argument unchanged.\nGet the value at a specific index in the vector.\nCalls <code>U::from(self)</code>.\nGet an iterator over the items in the vector.\nGet the last value in the vector.\nGet the number of items in the vector.\nCreate a new vector collection.\nRemove and return the last value from the vector.\nAdd a value to the end of the vector.\nUpdate the value at a specific index in the vector.\nRepresents an atomic unit in the storage system.\nThe associated type of any children that the <code>Collection</code> …\nSummary information for the child of an <code>Element</code> in the …\nA collection of child elements in the storage system.\nThe primary data for the <code>Element</code>.\nRepresents an <code>Element</code> in the storage.\nThe metadata for an <code>Element</code>.\nThe timestamp when the <code>Element</code> was last updated.\nInformation about the <code>Collection</code>s present in the <code>Data</code>.\nThe timestamp when the child was created.\nThe timestamp when the <code>Element</code> was first created.\nThe associated <code>Element</code>.\nThe associated <code>Element</code>, with mutability.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe unique identifier for the <code>Element</code>.\nThe unique identifier for the child <code>Element</code>.\nThe unique identifier for the <code>Element</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the <code>Element</code> is dirty.\nCurrent Merkle hash of the <code>Element</code>.\nCurrent Merkle hash of the <code>Element</code>.\nThe metadata for the <code>Element</code>.\nThe name of this <code>Collection</code>.\nCreates a new <code>ChildInfo</code>.\nCreates a new <code>Element</code>.\nThe path to the <code>Element</code> in the hierarchy.\nThe path to the <code>Element</code> in the hierarchy.\nConstructor for the root <code>Element</code>.\nUpdates the metadata for the <code>Element</code>.\nThe timestamp when the child was last updated.\nThe timestamp when the <code>Element</code> was last updated.\nCommits the root hash to the runtime.\nReturn the context id.\nFill the buffer with random bytes.\nReads data from persistent storage.\nRemoves data from persistent storage.\nWrites data to persistent storage.\nGet the current time.\nConvenience wrapper trait covering functionality of …\nSHA-256 hasher.\nProcess input data in a chained manner.\nCompute hash of <code>data</code>.\nRetrieve result and consume hasher instance.\nWrite result into provided array and consume the hasher …\nWrite result into provided array and reset the hasher …\nRetrieve result and reset hasher instance.\nCreate new hasher instance.\nCreate new hasher instance which has processed the …\nGet output size of the hasher\nReset hasher instance to its initial state.\nProcess data, updating the internal state.\nComparison data for synchronisation.\nThe comparison data for the entity.\nThe serialised data of the entity.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nActions to be taken during synchronisation.\nThe requested action is not allowed.\nAdd an entity with the given ID, type, and data.\nAn attempt was made to create an orphan, i.e. an entity …\nCompare the entity with the given ID and type. Note that …\nData that is used for comparison between two nodes.\nDelete an entity with the given ID.\nAn error occurred during serialization.\nAn error occurred when handling threads or async tasks.\nThe ID of the entity supplied does not match the ID in the …\nAn index entry already exists for the specified entity. …\nAn index entry was not found for the specified entity. …\nThe primary interface for the storage system.\nTODO: An error during tree validation.\nConvenient type alias for the main storage system.\nThe requested record was not found, but in the context it …\nAn error occurred during serialization.\nErrors that can occur when working with the storage system.\nTODO: An error from the Store.\nAn unexpected ID was encountered.\nAn unknown collection type was specified.\nAn unknown type was specified.\nUpdate the entity with the given ID and type to have the …\nAdds a child to a collection.\nApplies an <code>Action</code> to the storage system.\nThe basic info for children of the <code>Collection</code>.\nThe children of the <code>Collection</code>.\nSaves the root entity to the storage system, and commits …\nCompares a foreign entity with a local one, and applies …\nCompares a foreign entity with a local one.\nFinds an <code>Element</code> by its unique identifier.\nFinds an <code>Element</code> by its unique identifier without …\nFinds one or more <code>Element</code>s by path in the hierarchy.\nFinds the children of an <code>Element</code> by its unique identifier.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerates comparison data for an entity.\nWhether the <code>Collection</code> has children.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRetrieves the parent entity of a given entity.\nRemoves a child from a collection.\nRetrieves the root entity for a given context.\nSaves an <code>Element</code> to the storage system.\nSaves raw data to the storage system.\nValidates the stored state.\nDetails of the ancestors of the entity.\nDetails of the ancestors of the entity.\nDetails of the ancestors of the entity.\nSerialised data of the entity.\nSerialised data of the entity.\nUnique identifier of the entity.\nUnique identifier of the entity.\nUnique identifier of the entity.\nUnique identifier of the entity.\nThe metadata of the entity.\nThe metadata of the entity.\nAn entry key.\nAn index key.\nA key for storage operations.\nThe main storage system.\nDetermines where the ultimate storage system is located.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReads data from persistent storage.\nRemoves data from persistent storage.\nWrites data to persistent storage.\nConverts the key to a byte array.\nA list of actions.\nA list of comparisons.\nAn artifact to aid synchronisation with an external …\nCommits the root hash to the runtime. This will also …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRecords an action for eventual synchronisation.\nRecords a comparison for eventual synchronisation.")